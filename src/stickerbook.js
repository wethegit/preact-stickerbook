import { h, createContext } from "preact";
import {
  useEffect,
  useLayoutEffect,
  useMemo,
  useRef,
  useState,
} from "preact/hooks";
import { Vec2 } from "wtc-math";

import { classnames } from "./helpers";

// if in the future we have the need to have two
// stickerbook components rendering, I think
// we might be able to make this a scoped function
export const StickerbookContext = createContext();

export default function Stickerbook({
  background = {},
  foreground = {},
  frame = {},
  outputHeight = 500,
  outputWidth = 500,
  children,
  className,
  ...props
}) {
  const [dimensions, setDimensions] = useState({
    width: outputWidth,
    height: outputHeight,
    percentageShift: 1,
    rendered: false,
  });
  const [position, setPosition] = useState();
  const [backgroundDetails, setBackgroundDetails] = useState({});
  const mainRef = useRef();
  const parentRef = useRef();
  const foregroundIndex = useMemo(
    () => (children ? children.flat().length + 2 : 2),
    [children]
  );

  const backgroundStyles = useMemo(() => {
    if (background.type === "scene") return {};

    // calculate new size based on generated image
    // backgrounds should be generated by designers
    // and they should base themselves on the size of the stickerbook
    const bgSize = (backgroundDetails.width * dimensions.width) / outputWidth;

    return {
      backgroundRepeat: "repeat",
      backgroundSize: `${bgSize}px auto`,
    };
  }, [backgroundDetails.width, dimensions.width, background.type, outputWidth]);

  // when the node renders and also when we force resize
  useLayoutEffect(() => {
    const element = mainRef.current;
    const parent = parentRef.current;
    let resizeTimer, scrollTimer;

    const getPosition = function () {
      const rect = element.getBoundingClientRect();

      return new Vec2(rect.left, rect.top);
    };

    const onResize = function (init) {
      if (!element) return;
      clearTimeout(resizeTimer);

      resizeTimer = setTimeout(() => {
        const newWidth = parent.offsetWidth;
        const curWidth = element.offsetWidth;

        setPosition(getPosition());

        if (newWidth !== curWidth || init === true)
          setDimensions((cur) => {
            return {
              width: newWidth,
              height: (element.offsetHeight / curWidth) * newWidth,
              percentageShift: newWidth / cur.width,
              rendered: true,
            };
          });
      }, 300);
    };

    const onScroll = function () {
      if (!element) return;
      clearTimeout(scrollTimer);

      scrollTimer = setInterval(() => {
        setPosition(getPosition());
      }, 300);
    };

    window.addEventListener("resize", onResize);
    window.addEventListener("scroll", onScroll);

    onResize(true);

    return () => {
      clearTimeout(resizeTimer);
      clearTimeout(scrollTimer);

      window.removeEventListener("resize", onResize);
      window.removeEventListener("scroll", onScroll);
    };
  }, []);

  // when background changes, we load the image
  // and save the original size
  useEffect(() => {
    if (!background.image) return;

    const img = new Image();

    img.onload = (e) => {
      const img = e.target;
      const width = img.width;
      const height = img.height;

      setBackgroundDetails({ width, height });
    };

    img.src = background.image;
  }, [background.image]);

  return (
    // this first div is fluid and will help us get the dimensions
    // for the stickerbook itself
    <div
      role="region"
      aria-label="Stickerbook"
      className={classnames(["Stickerbook", className])}
      ref={parentRef}
      {...props}
    >
      <div
        ref={mainRef}
        style={{
          width: `${dimensions.width}px`,
          height: `${dimensions.height}px`,
        }}
      >
        {background && background.image && (
          <div
            role="img"
            className="Stickerbook__background"
            style={{
              backgroundImage: `url(${background.image})`,
              ...backgroundStyles,
            }}
            aria-label={background.alt || ""}
          />
        )}

        {frame && frame.image && (
          <img
            src={frame.image}
            alt={frame.alt || ""}
            className="Stickerbook__frame"
          />
        )}

        <StickerbookContext.Provider
          value={{
            parentRef: parentRef.current,
            mainRef: mainRef.current,
            position,
            dimensions,
          }}
        >
          {dimensions.rendered && children}
        </StickerbookContext.Provider>

        {foreground && foreground.image && (
          <img
            src={foreground.image}
            alt={foreground.alt || ""}
            className="Stickerbook__foreground"
            style={{ zIndex: foregroundIndex }}
          />
        )}
      </div>
    </div>
  );
}
